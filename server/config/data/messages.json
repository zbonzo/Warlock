{
  "errors": {
    "gameNotFound": "Game not found. Check the code and try again.",
    "gameCodeInvalid": "Invalid game code format. Please enter a 4-digit code.",
    "gameFull": "Game is full ({maxPlayers} players max).",
    "gameStarted": "Cannot join a game that has already started.",
    "gameNotStarted": "Game has not started yet.",
    "gameTimeout": "Game ended due to inactivity.",
    "playerNameRequired": "Name is required",
    "playerNameTooShort": "Name must be at least 2 characters long",
    "playerNameTooLong": "Name must be 20 characters or less",
    "playerNameNoLettersNumbers": "Name must contain at least one letter or number",
    "playerNameInvalidChars": "Name can only contain letters (including accented), numbers, spaces, hyphens (-), and apostrophes (').",
    "playerNameUnsafeChars": "Name contains unsafe characters",
    "playerNameWhitespace": "Name cannot start or end with spaces",
    "playerNameMultipleSpaces": "Name cannot contain multiple consecutive spaces",
    "playerNameOnlyPunctuation": "Name must contain at least one letter or number",
    "playerNameReserved": "\"{playerName}\" is a reserved game term. Please choose a different name.",
    "playerNameProblematicTerms": "Name contains problematic terms. Please choose a different name.",
    "playerNameTaken": "The name \"{playerName}\" is already taken. Please choose a different name.",
    "actionNotAOE": "{actionType} is not an AOE ability but \"multi\" target was specified.",
    "playerNotFound": "Player not found in this game.",
    "playerExists": "You are already in this game.",
    "playerNotInGame": "You are not a player in this game.",
    "playerDead": "Cannot perform action while dead.",
    "playerStunned": "You are stunned and cannot act.",
    "invalidPlayerName": "Invalid player name. Please use 1-20 alphanumeric characters.",
    "notHost": "Only the host can perform this action.",
    "notEnoughPlayers": "Need at least {minPlayers} players to start a game.",
    "allPlayersNotReady": "All players must select a character before starting.",
    "invalidAction": "Invalid action type.",
    "invalidTarget": "Invalid target.",
    "targetDead": "Cannot target a dead player.",
    "targetInvisible": "Cannot target an invisible player.",
    "alreadyActed": "You have already acted this round.",
    "actionOnCooldown": "{abilityName} is on cooldown for {turns} more turn(s).",
    "invalidRace": "Invalid race selection: \"{race}\" is not a valid race.",
    "invalidClass": "Invalid class selection: \"{className}\" is not a valid class.",
    "invalidCombination": "Invalid race and class combination: \"{race}\" cannot be a \"{className}\".",
    "noRacialAbility": "You do not have a racial ability.",
    "racialAbilityUsed": "You have already used your racial ability.",
    "racialAbilityOnCooldown": "Your racial ability is on cooldown for {turns} more turn(s).",
    "noUsesLeft": "No uses left for {abilityName} ability.",
    "adaptabilityFailed": "Failed to use Adaptability ability.",
    "abilityNotFound": "Original ability not found.",
    "abilityNotUnlocked": "Ability not unlocked at this level.",
    "serverBusy": "Server is too busy right now. Please try again later.",
    "unexpectedError": "An unexpected error occurred. Please try again.",
    "reconnectionFailed": "Failed to reconnect to game.",
    "rateLimited": "Too many requests. Please slow down.",
    "cooldownActive": "Please wait before trying again.",
    "nameCheckUnavailable": "Unable to check name availability. Please try again.",
    "gameOrStateInvalid": "Game not found or invalid state",
    "abilityOnCooldownPlural": "Ability \"{abilityName}\" is on cooldown for {turns} more turn{s}",
    "abilityNotFoundForPlayer": "You don't have the ability \"{abilityName}\"",
    "abilityUnavailableNow": "Cannot use ability \"{abilityName}\" right now",
    "targetInvalidOrDead": "Selected target is no longer alive or valid",
    "monsterInvalidTarget": "Monster is no longer a valid target",
    "actionAlreadySubmitted": "You have already submitted an action for this round",
    "actionSubmitFailed": "Failed to submit action. Please try again.",
    "actionProcessingError": "An error occurred while processing your action",
    "missingGameCodeOrPlayerName": "Missing game code or player name.",
    "invalidPlayerNameLength": "Invalid player name. Please use 1-20 characters.",
    "gameFullWithCount": "Game is full ({maxPlayers} players max).",
    "alreadyInThisGame": "You are already in this game.",
    "couldNotJoinGame": "Could not join game.",
    "createGameFailedServerBusy": "Failed to create game. Server may be busy.",
    "joinCreatedGameFailed": "Failed to join created game.",
    "startNewGameFailed": "Failed to start new game. Please try again.",
    "serverTooBusy": "Server is too busy right now. Please try again later.",
    "playerDeadCannotAct": "Dead players cannot perform actions",
    "playerActionAlreadySubmittedThisRound": "Action already submitted this round",
    "playerAbilityNotAvailable": "Ability '{abilityName}' is not available",
    "playerAbilityOnCooldownDetailed": "Ability '{abilityName}' is on cooldown for {turns} more turns",
    "playerNoTargetSpecified": "No target specified",
    "playerNoActionSubmittedForValidation": "No action submitted",
    "playerAbilityNoLongerAvailable": "Ability '{abilityName}' is no longer available",
    "playerAbilityNowOnCooldown": "Ability '{abilityName}' is now on cooldown ({turns} turns)",
    "playerMonsterInvalidTarget": "Monster is no longer a valid target",
    "playerTargetInvalidOrDead": "Player target is no longer alive or valid"
  },
  "success": {
    "gameCreated": "Game created successfully.",
    "gameJoined": "Successfully joined the game.",
    "gameStarted": "Game has started!",
    "characterSelected": "Character selected successfully.",
    "actionPerformed": "Action performed successfully.",
    "racialAbilityUsed": "Racial ability used successfully.",
    "adaptabilityTriggered": "Adaptability ability triggered.",
    "adaptabilityComplete": "Ability replacement successful.",
    "reconnected": "Successfully reconnected to game.",
    "levelUp": "The party has advanced to level {level}!",
    "newAbilitiesUnlocked": "You gained access to new abilities at level {level}!",
    "bonusesApplied": "Level {level} bonuses: Fully healed! Max HP increased by {hpIncrease}! Damage increased by 25%!",
    "actionSubmitted": "Action submitted successfully",
    "joinedReplayGame": "Successfully joined replay game {gameCode}"
  },
  "events": {
    "monsterAttacks": "The Monster attacks!",
    "monsterDefeated": "The Monster has been defeated!",
    "monsterRespawns": "A new Monster appears with {hp} HP!",
    "monsterNoTarget": "The Monster looks around but finds no targets.",
    "monsterSwipesAtShadows": "The Monster swipes at shadows.",
    "thirstyBladeHeal": "{playerName} is healed for {amount} HP by their Thirsty Blade!",
    "thirstyBladeFaded": "{playerName}'s Thirsty Blade grows dormant.",
    "relentlessFuryDamage": "{playerName}'s Relentless Fury increases damage!",
    "sweepingStrikeActivated": "{playerName}'s attacks now sweep through multiple enemies!",
    "playerAttacks": "{playerName} uses {abilityName} on {targetName}.",
    "playerHealed": "{playerName} was healed for {amount} health.",
    "playerTakesDamage": "{playerName} was attacked and lost {damage} health.",
    "playerDies": "{playerName} has fallen.",
    "playerResurrected": "{playerName} avoided death through {abilityName}!",
    "playerPoisoned": "{playerName} is poisoned for {damage} damage over {turns} turns.",
    "playerProtected": "{playerName} is protected with {armor} armor for {turns} turn(s).",
    "playerInvisible": "{playerName} becomes invisible for {turns} turn(s).",
    "playerStunned": "{playerName} is stunned for {turns} turn(s).",
    "playerCorrupted": "Another hero has been corrupted!",
    "warlockRevealed": "{playerName} IS a Warlock!",
    "notWarlock": "{playerName} is NOT a Warlock.",
    "humanAdaptability": "{playerName} uses Adaptability to replace one ability.",
    "elfKeenSenses": "{playerName} uses Keen Senses to study {targetName} closely.",
    "orcBloodRage": "{playerName} enters a Blood Rage, taking {damage} damage but doubling their next attack!",
    "satyrForestsGrace": "{playerName} calls upon Forest's Grace, gaining healing over time.",
    "dwarfStoneArmor": "{playerName}'s Stone Armor cracks and weakens! ({oldValue} â†’ {newValue})",
    "skeletonUndying": "{playerName}'s Undying ability is already active.",
    "stoneArmorDestroyed": "{playerName}'s Stone Armor is completely shattered! They now take increased damage!",
    "stoneArmorDegraded": "{playerName}'s Stone Armor weakens from the attack!",
    "levelUp": "The party has advanced to level {level}!",
    "nextRound": "Round {round} begins!",
    "gameEnding": "Game ending...",
    "playerJoined": "{playerName} joined the game.",
    "playerLeft": "{playerName} wandered into the forest to discover that there are many more monsters and they were very much unequipped",
    "playerDisconnected": "{playerName} temporarily disconnected.",
    "playerReconnected": "{playerName} has reconnected.",
    "hostChanged": "Game host changed to {playerName}.",
    "warlockChosenSingle": "A Warlock has been chosen and walks among you.",
    "playerLeftAllWarlocksGone": "{playerName} left the game. All Warlocks are gone.",
    "playerLeftSimple": "{playerName} left the game.",
    "unstoppableRageEnded": "{playerName}'s Unstoppable Rage ends, causing {actualDamage} exhaustion damage!",
    "spiritGuardFaded": "{playerName}'s Spirit Guard fades away.",
    "sanctuaryFaded": "{playerName}'s Sanctuary of Truth fades away.",
    "kinfolkLifebondPublic": "{playerName}'s Life Bond with the monster heals them for {healAmount} HP.",
    "warlockDetectionPenaltyAttacker": "{targetName} takes +{penalty}% damage from recent detection!",
    "coordinatedAttackDamage": "Coordinated attack! {playerCount} players target {targetName} for +{bonusPercent}% damage!",
    "vulnerableDamageTaken": "{targetName} is VULNERABLE and takes {increasePercent}% more damage! ({oldDamage} â†’ {newDamage})",
    "unstoppableRageReduction": "{targetName}'s Unstoppable Rage reduces damage by {reductionPercent}%! ({oldDamage} â†’ {newDamage})",
    "coordinatedHealing": "Coordinated healing! {playerCount} players heal {targetName} for +{bonusPercent}% healing!",
    "playerAttackedWithArmor": "{targetName} was attacked for {actualDamage} damage ({damageAmount} reduced by {reductionPercent}% armor).",
    "playerAttackedNoArmor": "{targetName} was attacked and lost {actualDamage} health.",
    "coordinatedMonsterAssault": "Coordinated assault! {playerCount} players attack the Monster for +{bonusPercent}% damage!",
    "undyingActivated": "{playerName} refuses to stay down! Undying ability activated.",
    "moonbeamRevealsCorrupted": "{targetName}'s desperate Moonbeam reveals that {attackerName} IS corrupted!",
    "moonbeamRevealsPure": "{targetName}'s Moonbeam reveals that {attackerName} is pure.",
    "spiritGuardCounter": "{targetName}'s vengeful spirits strike back at {attackerName} for {damage} damage!",
    "spiritsRevealWarlock": "The spirits reveal that {attackerName} IS a Warlock!",
    "sanctuaryPunishesWarlock": "{targetName}'s Sanctuary reveals and punishes the Warlock {attackerName} for {damage} damage!",
    "stoneResolveAbsorbed": "{targetName}'s Stone Resolve absorbed all damage from an attack!"
  },
  "privateMessages": {
    "youAttacked": "You attacked {targetName} for {damage} damage (initial {initialDamage}, reduced by {reduction}% from armor).",
    "youWereAttacked": "{attackerName} attacked you for {damage} damage, reduced by {reduction}% from your armor.",
    "youHealed": "You healed {targetName} for {amount} health.",
    "youWereHealed": "{healerName} healed you for {amount} health.",
    "youArePoisoned": "You are poisoned for {damage} damage over {turns} turns.",
    "youAreProtected": "You are protected with {armor} armor for {turns} turn(s).",
    "youAreInvisible": "You become invisible for {turns} turn(s).",
    "youAreStunned": "You are stunned for {turns} turn(s).",
    "youCorrupted": "You corrupted {targetName}.",
    "youWereCorrupted": "You were corrupted.",
    "attemptToHealWarlock": "You attempted to heal {targetName} (a Warlock), but healed yourself for {amount} HP instead.",
    "warlockRejectedHealing": "You rejected the healing from {healerName}.",
    "abilityOnCooldown": "{abilityName} is on cooldown for {turns} more turn(s).",
    "racialAbilityReady": "Your racial ability is ready to use again.",
    "noUsesLeft": "No uses left for your racial ability.",
    "youAreHost": "You are the host of this game.",
    "gameWaitingForPlayers": "Waiting for more players to join...",
    "allPlayersReady": "All players are ready! Host can start the game.",
    "chooseAbilityToReplace": "Choose an ability to replace with Adaptability.",
    "adaptabilityChooseFrom": "Choose a new ability from {className}:",
    "warlockDetectionPenaltyDamage": "Detection penalty increases damage by {penalty}%! ({oldDamage} â†’ {newDamage})",
    "comebackArmorBonus": "Comeback mechanics grant you +{armorBonus} armor!",
    "comebackHealingBonus": "Comeback mechanics boost your healing by {bonusPercent}%!",
    "comebackDamageBonus": "Comeback mechanics boost your damage by {bonusPercent}%!",
    "comebackCorruptionResistance": "Comeback mechanics grant you {resistancePercent}% corruption resistance!",
    "detectionPenaltyEnded": "Detection penalties have worn off.",
    "attackedWithArmor": "{attackerName} attacked you for {actualDamage} damage ({damageAmount} base, reduced by {reductionPercent}% from your {effectiveArmor} armor).",
    "attackedNoArmor": "{attackerName} attacked you for {actualDamage} damage.",
    "stoneArmorDegraded": "Your Stone Armor degrades from {oldValue} to {newValue}!",
    "stoneArmorDestroyed": "Your Stone Armor is destroyed! You now take {damageIncreasePercent}% more damage!",
    "moonbeamDetectedWarlock": "Your Moonbeam detected that {attackerName} is a Warlock!",
    "moonbeamConfirmedPure": "Your Moonbeam confirmed that {attackerName} is not a Warlock.",
    "spiritGuardStrikesYou": "{targetName}'s Spirit Guard strikes you for {damage} damage!",
    "yourSpiritsRevealWarlock": "Your spirits reveal that {attackerName} is a Warlock!",
    "yourStoneResolveAbsorbed": "Your Stone Resolve absorbed all damage from {attackerName}!",
    "killedBy": "You were killed by {attackerName}.",
    "undyingSavedYou": "Your Undying ability saved you from death!",
    "kinfolkLifebondPrivate": "Your Life Bond with the monster heals you for {healAmount} HP.",
    "healingBlockedTarget": "Your healing has no effect on {targetName}.",
    "healedByPlayer": "You are healed for {actualHeal} HP by {healerName}."
  },
  "winConditions": {
    "goodWins": "Good triumphs! All Warlocks have been defeated.",
    "evilWins": "Evil reigns! The Warlocks have taken control.",
    "gameEnded": "Game ended.",
    "noWinner": "Game continues..."
  },
  "abilities": {
    "attacks": {
      "attackInvisible": "{attackerName} tries to attack {targetName}, but they are invisible and cannot be seen!",
      "attackInvalidTarget": "{actorName} tries to use {abilityName}, but the target is invalid.",
      "attackDeadTarget": "{actorName} cannot attack the fallen {targetName}.",
      "poisonStrike": "{targetName} is poisoned for {damage} damage over {turns} turns.",
      "poisonApplied": "{playerName} is poisoned for {damage} damage over {turns} turns.",
      "multiHitAnnounce": "{playerName} uses {abilityName} on {targetName}, striking {hits} times!",
      "multiHitSummary": "{hitCount} hits connected, dealing a total of {totalDamage} damage.",
      "multiHitMissed": "All hits missed!",
      "multiHitIndividual": "Hit #{hitNumber}: {playerName} dealt {damage} damage to {targetName}",
      "multiHitMiss": "Hit #{hitNumber} missed!",
      "vulnerabilityApplied": "{targetName} is VULNERABLE and will take {increase}% more damage for {turns} turn(s)!",
      "vulnerabilityStrike": "{targetName} is weakened by {playerName}'s {abilityName}!",
      "aoeAnnounce": "{playerName} unleashes {abilityName}!",
      "aoeNoTargets": "{playerName} uses {abilityName}, but there are no valid targets.",
      "deathMarkPoison": "{playerName} uses {abilityName} on {targetName}, marking them for death with {damage} poison damage over {turns} turns, then vanishes into the shadows!",
      "deathMarkInvalidTarget": "{playerName} tries to use {abilityName} on the Monster, but it has no effect.",
      "poisonTrapAnnounce": "{playerName} sets multiple {abilityName}s!",
      "poisonTrapCaught": "{targetName} is caught in {playerName}'s {abilityName}, taking {damage} poison damage over {turns} turns and becoming vulnerable (+{increase}% damage) for {vulnerableTurns} turns!",
      "poisonTrapMissed": "{playerName}'s {abilityName}s don't catch anyone!",
      "poisonTrapSummary": "{count} enemies were caught in the traps!",
      "recklessStrikeSelfDamage": "{playerName} commits to a reckless strike, taking {damage} damage!",
      "barbedArrowDetectSuccess": "Your careful aim reveals that {targetName} is corrupted by dark magic!",
      "barbedArrowDetectFail": "Your observation of {targetName} reveals no signs of corruption.",
      "pyroblastDetectSuccess": "Your intense flames reveal that {targetName} is corrupted by dark magic!",
      "pyroblastDetectFail": "Your searing heat shows no signs of corruption in {targetName}.",
      "infernoBlastPoison": "{targetName} is poisoned for {damage} damage over {turns} turns.",
      "monsterAttackSuccess": "The Monster takes {damage} damage from {playerName}'s {abilityName}!",
      "monsterAttackFailure": "{playerName} tries to use {abilityName} on the Monster, but it has no effect.",
      "abilityUsed": "{playerName} uses {abilityName}.",
      "abilityFailed": "{playerName} tries to use {abilityName}, but something goes wrong!",
      "abilityCrit": "{playerName} lands a critical {abilityName} on {targetName}!",
      "abilityUltraFail": "{playerName} loses control of {abilityName}, striking {targetName} by mistake!"
    },
    "defense": {
      "shieldApplied": "{playerName} is shielded with {armor} armor for {turns} turn(s).",
      "protectionGranted": "{playerName} is protected with {armor} armor for {turns} turn(s).",
      "invisibilityApplied": "{playerName} becomes invisible for {turns} turn(s).",
      "shadowVeilUsed": "{playerName} fades from sight for {turns} turn(s).",
      "shadowstepUsed": "{playerName} uses {abilityName} on {targetName}, shrouding them in shadows for {turns} turn(s).",
      "shadowstepInvalidTarget": "{playerName} tries to use {abilityName}, but the target is invalid.",
      "multiProtectionUsed": "{playerName} uses {abilityName}, protecting {count} allies with {armor} armor for {turns} turn(s).",
      "battleCryUsed": "{playerName} uses {abilityName}, protecting {count} allies with {armor} armor for {turns} turn(s).",
      "divineShieldUsed": "{playerName} uses {abilityName}, protecting {count} allies with {armor} armor for {turns} turn(s).",
      "defenseActivated": "{playerName} activates {abilityName}.",
      "defenseFailed": "{playerName} tries to use {abilityName}, but it fails.",
      "abilityCrit": "{playerName} fortifies {targetName} with a potent {abilityName}!",
      "abilityUltraFail": "{playerName} fumbles {abilityName}, accidentally shielding {targetName} instead!"
    },
    "healing": {
      "healingApplied": "{playerName} was healed for {amount} health.",
      "healingPerformed": "{healerName} healed {targetName} for {amount} health.",
      "alreadyFullHealth": "{healerName} tried to heal {targetName}, but they're already at full health.",
      "targetFullHealth": "{targetName} is already at full health.",
      "warlockHealingRejected": "You rejected the healing from {healerName}.",
      "warlockHealingSelfHeal": "You attempted to heal {targetName} (a Warlock), but healed yourself for {amount} HP instead.",
      "rejuvenationCast": "{playerName} casts {abilityName}, blessing nearby allies with healing over time!",
      "rejuvenationApplied": "{count} allies were blessed with {healPerTurn} HP regeneration per turn for {turns} turns.",
      "rejuvenationNoTargets": "{playerName}'s {abilityName} finds no valid targets to bless.",
      "rejuvenationBlessing": "{playerName} blessed you with healing over time! You will regenerate {healPerTurn} HP per turn for {turns} turns.",
      "healingOverTimeRegeneration": "{playerName} regenerates {amount} health from their blessing.",
      "healingOverTimeExpired": "The healing blessing on {playerName} has faded.",
      "multiHealCast": "{playerName} casts {abilityName}, healing nearby allies!",
      "multiHealTargets": "{count} allies were healed by {playerName}'s {abilityName}.",
      "youHealed": "You healed {targetName} for {amount} health.",
      "youWereHealed": "{healerName} healed you for {amount} health.",
      "youRegenerateHP": "You regenerate {amount} HP from healing over time.",
      "healingFailed": "{playerName} tries to use {abilityName}, but the healing fails.",
      "healingUsed": "{playerName} uses {abilityName}.",
      "abilityCrit": "{playerName} channels a critical {abilityName}, restoring {amount} health to {targetName}!",
      "abilityUltraFail": "{playerName}'s {abilityName} wildly heals {targetName} instead!"
    },
    "special": {
      "detectionUsed": "{playerName} uses {abilityName} on {targetName}.",
      "detectionInvalidTarget": "{playerName} tries to use {abilityName}, but it can only target players.",
      "warlockDetected": "Revelation: {targetName} IS a Warlock!",
      "warlockNotDetected": "Revelation: {targetName} is NOT a Warlock.",
      "eyeOfFateUsed": "{playerName} uses {abilityName} on {targetName}.",
      "eyeOfFateWarlockFound": "Your Eye of Fate reveals that {targetName} is a Warlock!",
      "eyeOfFateWarlockNotFound": "Revelation: {targetName} is NOT a Warlock.",
      "eyeOfFatePsychicBacklash": "{playerName} takes {damage} psychic backlash for failing to find a Warlock!",
      "eyeOfFateBacklashPrivate": "You take {damage} psychic damage for not detecting a Warlock!",
      "stunApplied": "{targetName} is stunned for {turns} turn(s).",
      "stunResisted": "{targetName} resists {playerName}'s {abilityName}!",
      "stunInvalidTarget": "{playerName} tries to use {abilityName}, but the target is invalid.",
      "entangleRootsCast": "{playerName} casts {abilityName}!",
      "entangleRootsStunned": "{targetName} has been pinned to the ground by roots for {turns} turn(s).",
      "entangleRootsResisted": "{targetName} breaks free from the grasping roots!",
      "entangleRootsNoEffect": "{playerName}'s {abilityName} finds no targets to entangle.",
      "multiStunCast": "{playerName} casts {abilityName}!",
      "multiStunNoTargets": "{playerName} uses {abilityName}, but there are no valid targets.",
      "multiStunNoneAffected": "{playerName}'s {abilityName} doesn't stun anyone!",
      "primalRoarUsed": "{playerName} lets out a terrifying roar! {targetName} is weakened and will deal {reduction}% less damage for {turns} turn(s).",
      "primalRoarInvalidTarget": "{playerName} tries to use {abilityName}, but the target is invalid.",
      "bloodFrenzyActivated": "{playerName} enters a Blood Frenzy! Damage increases as health decreases ({rate}% per 1% HP missing).",
      "unstoppableRageActivated": "{playerName} enters an Unstoppable Rage! Damage boosted by {damageBoost}% and damage resistance increased by {resistance}% for {turns} turns.",
      "unstoppableRageWarning": "Warning: When the rage ends, {playerName} will take {selfDamage}% of max HP as damage!",
      "unstoppableRageEnded": "{playerName}'s Unstoppable Rage ends, causing {damage} exhaustion damage!",
      "spiritGuardActivated": "{playerName} summons vengeful spirits! Gains {armor} armor and attackers will take {counterDamage} damage and be revealed if they are Warlocks for {turns} turn(s).",
      "spiritGuardCounter": "{targetName}'s vengeful spirits strike back at {attackerName} for {damage} damage!",
      "spiritGuardCounterPrivate": "{targetName}'s Spirit Guard strikes you for {damage} damage!",
      "spiritGuardRevealWarlock": "The spirits reveal that {attackerName} IS a Warlock!",
      "spiritGuardRevealPrivate": "Your spirits reveal that {attackerName} is a Warlock!",
      "spiritGuardEnded": "{playerName}'s Spirit Guard fades away.",
      "sanctuaryOfTruthActivated": "{playerName} creates a Sanctuary of Truth and heals for {amount} health.",
      "sanctuaryOfTruthDetection": "{playerName}'s Sanctuary will automatically detect and punish any Warlocks who attack!",
      "sanctuaryOfTruthRevealAndPunish": "{targetName}'s Sanctuary reveals and punishes the Warlock {attackerName} for {damage} damage!",
      "sanctuaryOfTruthRevealNotWarlock": "{targetName}'s Sanctuary detects that {attackerName} is NOT a Warlock.",
      "sanctuaryOfTruthCounterPrivate": "{targetName}'s Sanctuary detects your corruption and punishes you for {damage} damage!",
      "sanctuaryOfTruthDetectionPrivate": "Your Sanctuary detects that {attackerName} is a Warlock and punishes them!",
      "sanctuaryOfTruthNoWarlockPrivate": "Your Sanctuary confirms that {attackerName} is not a Warlock.",
      "sanctuaryOfTruthHealPrivate": "Your Sanctuary heals you for {amount} HP.",
      "sanctuaryOfTruthEnded": "{playerName}'s Sanctuary of Truth fades away.",
      "controlMonsterUsed": "{playerName} uses {abilityName}! The Monster's eyes glow with unnatural fury as it focuses on {targetName}!",
      "controlMonsterDamage": "The Monster deals {damage} damage ({boost}% more than normal) under {playerName}'s command!",
      "controlMonsterDeadMonster": "{playerName} tries to use {abilityName}, but the Monster is already defeated.",
      "controlMonsterInvalidTarget": "{playerName} tries to use {abilityName}, but cannot force the Monster to attack itself.",
      "controlMonsterNoTargets": "{playerName} uses {abilityName}, but there are no valid targets for the Monster to attack.",
      "specialAbilityUsed": "{playerName} uses {abilityName}.",
      "specialAbilityFailed": "{playerName} tries to use {abilityName}, but it fails.",
      "abilityCrit": "{playerName} masterfully uses {abilityName} on {targetName}!",
      "abilityUltraFail": "{playerName}'s {abilityName} goes haywire and hits {targetName}!"
    },
    "racial": {
      "adaptabilityUsed": "{playerName} uses Adaptability to replace one ability.",
      "adaptabilityAvailableAbilities": "Choose an ability to replace with Adaptability.",
      "bloodRageUsed": "{playerName} enters a Blood Rage, taking {damage} damage but doubling their next attack!",
      "undyingActivated": "{playerName}'s Undying ability is now active and will trigger automatically when needed.",
      "undyingAlreadyActive": "{playerName}'s Undying ability is already active.",
      "racialAbilityUsed": "{playerName} uses their racial ability.",
      "racialAbilityFailed": "{playerName} tries to use their racial ability, but it fails.",
      "racialAbilityCrit": "{playerName} unleashes the full power of their racial ability!",
      "racialAbilityUltraFail": "{playerName}'s racial ability backfires on {targetName}!"
    }
  },
  "combat": {
    "damage": {
      "playerTakesDamage": "{targetName} takes {damage} damage!",
      "playerDamageWithArmor": "{targetName} takes {damage} damage ({initial} reduced by {reduction}% armor)!",
      "playerDamageReduced": "{targetName}'s {armor} armor reduces the blow to {damage} damage!",
      "vulnerabilityDamage": "{targetName} takes {damage} damage (increased by vulnerability)!",
      "vulnerabilityAmplified": "Vulnerability amplifies the damage to {damage}!",
      "vulnerabilityEffect": "{targetName}'s weakness causes {damage} damage!",
      "monsterTakesDamage": "The Monster takes {damage} damage!",
      "damageDealt": "{damage} damage is dealt to {targetName}!",
      "damageStruck": "{targetName} is struck for {damage} damage!"
    },
    "barbarian": {
      "relentlessFuryVulnerability": "{playerName}'s Relentless Fury causes them to take {additionalDamage} additional damage!",
      "thirstyBladeLifeSteal": "{playerName} drains {healAmount} HP from their enemy!",
      "sweepingStrikeHits": "{playerName}'s Sweeping Strike cleaves through {targetCount} additional enemies!",
      "sweepingStrikeStuns": "The devastating blow leaves {targetName} stunned!"
    },
    "coordination": {
      "damageBonus": "Coordinated attack! {playerCount} players target {targetName} for +{bonusPercent}% damage!",
      "healingBonus": "Coordinated healing! {playerCount} healers restore {targetName} for +{bonusPercent}% healing!",
      "monsterAssault": "Coordinated assault! {playerCount} players attack the Monster for +{bonusPercent}% damage!",
      "teamworkAnnouncement": "Teamwork makes the dream work! Coordination bonus activated.",
      "coordinationFailed": "Attack coordination failed - players targeted different enemies.",
      "healingCoordination": "Multiple healers focus their efforts on {targetName}!"
    },
    "comeback": {
      "activated": "ðŸ”¥ COMEBACK MECHANICS ACTIVATED! ðŸ”¥ The remaining {goodPlayerCount} good players fight with desperate strength!",
      "damageBonus": "Desperate resolve grants {playerName} +{bonusPercent}% damage!",
      "healingBonus": "Survival instincts boost {playerName}'s healing by +{bonusPercent}%!",
      "armorBonus": "Determination grants {playerName} +{armorBonus} armor!",
      "corruptionResistance": "{playerName} resists corruption with {resistancePercent}% resistance!",
      "lastStand": "The final heroes make their last stand against the darkness!",
      "hopeDies": "With the fall of {playerName}, hope fades from the remaining heroes...",
      "hopeRenewed": "Against all odds, the tide may yet turn!"
    },
    "detection": {
      "penaltyApplied": "{warlockName} has been exposed! They take +{penaltyPercent}% damage and cannot corrupt others this turn.",
      "penaltyActive": "{warlockName} suffers from recent detection - taking increased damage!",
      "corruptionBlocked": "Your recent exposure prevents you from corrupting others.",
      "penaltyExpired": "The detection penalties have worn off.",
      "warlockWeakened": "The exposed Warlock {warlockName} appears vulnerable!",
      "privateDetectionPenalty": "You've been detected! You take +{penaltyPercent}% damage and cannot corrupt others this turn.",
      "privatePenaltyWarning": "Your corruption exposure makes you vulnerable to attacks!",
      "privateCorruptionBlocked": "Your recent detection prevents you from corrupting others this turn."
    },
    "death": {
      "playerDies": "{playerName} has fallen!",
      "playerCollapse": "{playerName} collapses to the ground!",
      "playerFinalBreath": "{playerName} draws their final breath!",
      "playerLightFades": "The light fades from {playerName}'s eyes!",
      "deathByPoison": "{playerName} succumbs to poison.",
      "deathByEffects": "{playerName} is overcome by magical effects.",
      "heroicSacrifice": "{playerName} falls heroically, inspiring the remaining good players!",
      "warlockEliminated": "The Warlock {playerName} has been eliminated!",
      "lastHeroDies": "With {playerName}'s death, the last light of hope is extinguished..."
    },
    "resurrection": {
      "playerResurrected": "{playerName} refuses to stay down!",
      "playerRises": "{playerName} rises from the brink of death!",
      "playerDefiesDeath": "Death cannot claim {playerName} just yet!",
      "playerDefiesFate": "{playerName} defies their fate!",
      "undyingActivated": "{playerName} avoided death through Undying!",
      "resurrectionByAbility": "{playerName} avoided death through {abilityName}!",
      "hopefulReturn": "{playerName} returns to continue the fight against darkness!",
      "undyingWill": "Undying determination brings {playerName} back to the battle!"
    },
    "armor": {
      "stoneArmorDegrades": "{playerName}'s Stone Armor cracks and weakens! ({oldValue} â†’ {newValue})",
      "stoneArmorDestroyed": "{playerName}'s Stone Armor is completely shattered! They now take increased damage!",
      "stoneArmorWeakens": "{playerName}'s Stone Armor weakens from the attack!",
      "armorAbsorbs": "{playerName}'s armor absorbs some of the damage!",
      "armorReducesDamage": "Armor reduces the damage to {playerName}!",
      "comebackArmor": "Desperate determination grants {playerName} additional armor!",
      "lastStandProtection": "The final heroes' resolve manifests as protective energy!"
    },
    "counterAttack": {
      "spiritGuardCounter": "{defenderName}'s vengeful spirits strike back at {attackerName} for {damage} damage!",
      "spiritGuardCounterPrivate": "{defenderName}'s Spirit Guard strikes you for {damage} damage!",
      "spiritGuardReveal": "The spirits reveal that {attackerName} IS a Warlock!",
      "spiritGuardRevealPrivate": "Your spirits reveal that {attackerName} is a Warlock!",
      "sanctuaryCounter": "{defenderName}'s Sanctuary reveals and punishes the Warlock {attackerName} for {damage} damage!",
      "sanctuaryCounterPrivate": "{defenderName}'s Sanctuary detects your corruption and punishes you for {damage} damage!",
      "sanctuaryReveal": "{defenderName}'s Sanctuary detects that {attackerName} is a Warlock and punishes them!",
      "sanctuaryNoWarlock": "{defenderName}'s Sanctuary detects that {attackerName} is NOT a Warlock.",
      "sanctuaryNoWarlockPrivate": "Your Sanctuary confirms that {attackerName} is not a Warlock.",
      "genericCounter": "{defenderName} strikes back at {attackerName}!",
      "counterDamage": "A counter-attack deals {damage} damage to {attackerName}!",
      "detectionCounterAttack": "{defenderName}'s detection ability strikes back at the exposed Warlock {attackerName}!",
      "truthRevealed": "The truth is revealed, and {attackerName} pays the price for their deception!"
    },
    "immunity": {
      "stoneResolve": "{playerName}'s Stone Resolve absorbed all damage from an attack!",
      "stoneResolvePrivate": "Your Stone Resolve absorbed all damage from {attackerName}!",
      "stoneResolveAttacker": "{targetName}'s Stone Resolve absorbed all your damage!",
      "generalImmunity": "{playerName} is immune to the attack!",
      "damageNegated": "The damage to {playerName} is completely negated!",
      "desperateResolve": "{playerName}'s desperate resolve protects them from harm!",
      "lastHopeShield": "The last hope of good protects {playerName} from evil!"
    },
    "unstoppableRage": {
      "damageReduction": "{playerName}'s Unstoppable Rage reduces damage by {resistance}%! ({before} â†’ {after})",
      "rageEnded": "{playerName}'s Unstoppable Rage ends, causing {damage} exhaustion damage!",
      "rageFading": "{playerName}'s rage is fading...",
      "rageBoosted": "{playerName}'s rage is amplified by desperate circumstances!",
      "finalRage": "In their darkest hour, {playerName}'s rage burns brightest!"
    },
    "moonbeam": {
      "warlockDetected": "{targetName}'s desperate Moonbeam reveals that {attackerName} IS corrupted!",
      "notWarlockDetected": "{targetName}'s Moonbeam reveals that {attackerName} is pure.",
      "moonbeamPrivate": "Your Moonbeam detected that {attackerName} is a Warlock!",
      "moonbeamConfirmed": "Your Moonbeam confirmed that {attackerName} is not a Warlock.",
      "moonbeamExposed": "{targetName}'s Moonbeam exposed your corruption!",
      "moonbeamConfirmedPurity": "{targetName}'s Moonbeam confirmed your purity.",
      "moonbeamDesperate": "In desperation, {targetName}'s Moonbeam pierces through deception!",
      "truthRevealed": "The moonlight reveals the truth about {attackerName}!"
    },
    "lifeBond": {
      "healing": "{playerName}'s Life Bond with the monster heals them for {amount} HP.",
      "healingPrivate": "Your Life Bond with the monster heals you for {amount} HP.",
      "bondStrengthened": "{playerName}'s Life Bond grows stronger in desperate times!",
      "naturalHealing": "Nature itself aids {playerName} in their time of need!"
    },
    "teamwork": {
      "coordinationBuilding": "Players are coordinating their efforts...",
      "teamworkBonus": "Teamwork grants significant bonuses to damage and healing!",
      "communicationKey": "Communication and timing are essential for maximum coordination!",
      "isolatedPlayer": "{playerName} acts alone while others coordinate their efforts.",
      "perfectCoordination": "Perfect coordination! All players target the same enemy!",
      "healingChain": "A chain of healing magic flows through the coordinated healers!"
    },
    "warlockInteraction": {
      "corruptionResisted": "{targetName} resists corruption with {resistancePercent}% resistance from comeback mechanics!",
      "detectedWarlockWeakened": "The recently detected Warlock {warlockName} appears more vulnerable!",
      "corruptionFailed": "{warlockName}'s corruption attempt fails against {targetName}'s resolve!",
      "detectionPreventsCorruption": "{warlockName} cannot corrupt others while suffering from detection penalties!",
      "lastHopeResistance": "The last hopes of good grant strong resistance to corruption!"
    },
    "private": {
      "youAttacked": "You attacked {targetName} for {damage} damage (initial {initialDamage}, reduced by {reduction}% from armor).",
      "youWereAttacked": "{attackerName} attacked you for {damage} damage, reduced by {reduction}% from your armor.",
      "attackerDamageDealt": "You attacked {targetName} for {damage} damage (initial {initialDamage}, reduced by {reduction}% from their {armor} armor).",
      "targetDamageReceived": "{attackerName} attacked you for {damage} damage.",
      "youAttackedSimple": "You attacked {targetName} for {damage} damage.",
      "youWereAttackedSimple": "{attackerName} attacked you for {damage} damage.",
      "youCoordinated": "Your coordinated attack with {playerCount} others deals bonus damage!",
      "coordinationReceived": "You benefit from coordinated healing by {playerCount} allies!",
      "yourComebackBonuses": "Comeback mechanics grant you: +{damageBonus}% damage, +{healingBonus}% healing, +{armorBonus} armor!",
      "yourCorruptionResistance": "Your desperate situation grants {resistancePercent}% corruption resistance!",
      "yourDetectionPenalty": "Being detected applies: +{penaltyPercent}% damage taken, corruption blocked this turn.",
      "yourDetectionRecovery": "Detection penalties have worn off - you can corrupt again!",
      "attackedWithArmor": "{attackerName} attacked you for {actualDamage} damage ({damageAmount} base, reduced by {reductionPercent}% from your {effectiveArmor} armor).",
      "attackedNoArmor": "{attackerName} attacked you for {actualDamage} damage.",
      "healedByPlayer": "You are healed for {actualHeal} HP by {healerName}.",
      "stoneArmorWeakenedAttacker": "{targetName}'s Stone Armor weakens from your attack!",
      "moonbeamExposedCorruption": "{targetName}'s Moonbeam exposed your corruption!",
      "moonbeamConfirmedPurityAttacker": "{targetName}'s Moonbeam confirmed your purity.",
      "healingBlockedTarget": "Your healing has no effect on {targetName}.",
      "healedTarget": "You heal {targetName} for {actualHeal} HP.",
      "youKilledTarget": "You killed {targetName}.",
      "targetAvoidedDeathUndying": "{playerName} avoided death through Undying.",
      "stoneResolveAbsorbedYourDamage": "{targetName}'s Stone Resolve absorbed all your damage!"
    },
    "gameState": {
      "comebackActivated": "The tide of battle shifts - the remaining good players fight with renewed vigor!",
      "comebackDeactivated": "The immediate crisis passes, but vigilance remains...",
      "coordrationImproved": "Team coordination is improving!",
      "coordinationBroken": "Team coordination falters as players act independently.",
      "finalStand": "This may be the final stand of good against evil!",
      "hopefulTurn": "The momentum shifts - perhaps there is hope yet!",
      "darknessRising": "Darkness spreads as the Warlocks gain the upper hand...",
      "balanceShifts": "The balance of power shifts dramatically!"
    }
  },
  "statusEffects": {},
  "warlock": {
    "corruption": {
      "playerCorrupted": "Another hero has been corrupted!",
      "playerConverted": "A hero has fallen to darkness!",
      "corruptionSpreads": "The corruption spreads through the party!",
      "darknessWins": "Darkness claims another soul!",
      "conversionAttempted": "Dark energy swirls around {targetName}...",
      "conversionFailed": "{targetName} resists the corrupting influence.",
      "conversionSuccess": "{targetName} has been turned to the dark side!",
      "warlockInfluence": "{attackerName}'s dark influence affects {targetName}.",
      "darkWhispers": "Dark whispers echo in {targetName}'s mind...",
      "shadowTouch": "Shadows reach out to claim {targetName}."
    },
    "detection": {
      "warlockRevealed": "{playerName} IS a Warlock!",
      "notWarlock": "{playerName} is NOT a Warlock.",
      "warlockDetected": "{playerName} has been exposed as a Warlock!",
      "innocentRevealed": "{playerName}'s innocence is confirmed.",
      "magicalDetection": "Magical forces reveal {playerName}'s true nature!",
      "divineSight": "Divine sight pierces through {playerName}'s disguise!",
      "truthRevealed": "The truth about {playerName} is revealed!",
      "detectionFailed": "The detection attempt reveals nothing.",
      "obscuredTruth": "{playerName}'s true nature remains hidden.",
      "magicResisted": "{playerName} resists the detection magic."
    },
    "victory": {
      "warlocksWin": "Evil reigns! The Warlocks have taken control.",
      "goodWins": "Good triumphs! All Warlocks have been defeated.",
      "darknessVictorious": "Darkness has consumed the world!",
      "lightPrevails": "The light has banished the darkness!",
      "corruptionComplete": "The corruption is complete - evil has won!",
      "allWarlocksDefeated": "With the last Warlock fallen, good prevails!",
      "majorityCorrupted": "The corrupted now outnumber the pure!"
    },
    "abilities": {
      "corruptingTouch": "{warlockName} reaches out with a corrupting touch...",
      "darkMagic": "{warlockName} channels dark magical energies!",
      "shadowManipulation": "{warlockName} manipulates the shadows!",
      "vileInfluence": "{warlockName}'s vile influence spreads!",
      "corruptionAura": "An aura of corruption surrounds {warlockName}.",
      "darkPower": "{warlockName} draws upon dark powers!",
      "evilPresence": "Evil presence emanates from {warlockName}."
    },
    "resistance": {
      "corruptionResisted": "{playerName} resists the corruption!",
      "purityProtects": "{playerName}'s purity protects them from corruption.",
      "willpowerTriumphs": "{playerName}'s willpower overcomes the dark influence.",
      "faithShields": "{playerName}'s faith shields them from evil.",
      "recentCorruption": "{playerName} is still recovering from recent corruption attempts.",
      "corruptionCooldown": "{playerName} cannot be corrupted again so soon.",
      "protectedByLight": "{playerName} is temporarily protected by divine light."
    },
    "suspicion": {
      "suspiciousBehavior": "{playerName}'s behavior seems suspicious...",
      "darkAura": "Something dark seems to surround {playerName}.",
      "unnaturalActions": "{playerName}'s actions seem unnatural.",
      "hiddenMotives": "{playerName}'s motives are unclear.",
      "falseAccusation": "{playerName} was wrongly suspected of being a Warlock.",
      "mistakeRevealed": "The suspicion about {playerName} was misplaced.",
      "innocentAccused": "An innocent has been accused of corruption."
    },
    "scaling": {
      "multipleWarlocksAssigned": "Multiple heroes have been corrupted at the start! {count} Warlocks are among you.",
      "warlockCountForPlayers": "With {playerCount} players, {warlockCount} Warlock(s) have been chosen.",
      "rebalancingWarlock": "The balance of power shifts... A new Warlock emerges due to changing numbers.",
      "rebalancingComplete": "Game rebalanced: {warlocksAdded} new Warlock(s) added due to player count changes."
    },
    "private": {
      "youCorrupted": "You corrupted {targetName}.",
      "youWereCorrupted": "You were corrupted and are now a Warlock.",
      "corruptionFailed": "Your corruption attempt on {targetName} failed.",
      "youAreWarlock": "You are a Warlock. Spread corruption and eliminate the good players.",
      "corruptionInstructions": "Attack other players to attempt corruption.",
      "winCondition": "Convert enough players or eliminate the opposition to win.",
      "hiddenIdentity": "Keep your true nature hidden from the other players.",
      "attemptCorruption": "Attempting to corrupt {targetName}...",
      "corruptionSuccess": "You successfully corrupted {targetName}!",
      "corruptionBlocked": "Your corruption attempt was blocked.",
      "detectionAvoided": "You avoided detection.",
      "suspicionRaised": "Your actions may have raised suspicion.",
      "identityCompromised": "Your identity may be compromised."
    },
    "mechanics": {
      "corruptionChance": "Corruption chance: {chance}%",
      "corruptionModified": "Corruption chance modified by {modifier}",
      "multipleWarlocks": "Multiple Warlocks are now active.",
      "lastWarlock": "{playerName} is the last remaining Warlock.",
      "corruptionLimitReached": "Maximum corruptions per round reached.",
      "corruptionCooldownActive": "Corruption is on cooldown.",
      "corruptionWindowClosed": "The corruption window has closed.",
      "corruptionScaling": "Corruption chance scales with Warlock count.",
      "balanceAdjustment": "Game balance adjusts for current player ratio.",
      "difficultyIncrease": "Corruption becomes more difficult with fewer targets."
    }
  },
  "monster": {
    "attacks": {
      "monsterAttacks": "The Monster attacks!",
      "monsterLunges": "The Monster lunges forward!",
      "monsterStrikes": "The Monster strikes with fury!",
      "monsterRages": "The Monster attacks with savage intent!",
      "monsterSlashes": "The Monster slashes with its claws!",
      "furiousAssault": "The Monster launches a furious assault!",
      "savageStrike": "The Monster delivers a savage strike!",
      "brutalAttack": "The Monster makes a brutal attack!",
      "recklessCharge": "The Monster charges recklessly!"
    },
    "targeting": {
      "monsterFocuses": "The Monster focuses on {targetName}!",
      "monsterTargets": "The Monster targets {targetName}!",
      "monsterHunts": "The Monster hunts {targetName}!",
      "monsterStalks": "The Monster stalks toward {targetName}!",
      "monsterNoTarget": "The Monster looks around but finds no targets.",
      "monsterSwipes": "The Monster swipes at shadows.",
      "monsterRoars": "The Monster roars in frustration.",
      "monsterConfused": "The Monster appears confused by the lack of targets.",
      "emptyBattlefield": "The Monster finds the battlefield empty."
    },
    "death": {
      "monsterDefeated": "The Monster has been defeated!",
      "monsterFalls": "The Monster falls with a thunderous crash!",
      "monsterCollapses": "The Monster collapses in defeat!",
      "monsterVanquished": "The Monster is vanquished!",
      "finalRoar": "The Monster lets out a final roar before collapsing!",
      "monsterCrumbles": "The Monster's form crumbles to dust!",
      "monsterDissolves": "The Monster dissolves into nothingness!",
      "monsterBanished": "The Monster is banished back to the void!",
      "lightBanishes": "The light banishes the Monster from this realm!"
    },
    "respawn": {
      "monsterRespawns": "A new Monster appears with {hp} HP!",
      "newMonster": "Another Monster emerges from the shadows!",
      "darknessSpawns": "The darkness spawns another Monster!",
      "monsterRises": "Another Monster rises to take its place!",
      "evilManifests": "The evil force manifests a new Monster!",
      "portalOpens": "A dark portal opens and releases a new Monster!",
      "shadowsCoalesce": "The shadows coalesce into a new Monster!",
      "voidSpawns": "The void spawns a more powerful Monster!",
      "darknessReforms": "The darkness reforms into a new threat!"
    },
    "scaling": {
      "monsterGrows": "The Monster grows stronger!",
      "monsterEvolves": "The Monster evolves into a more dangerous form!",
      "powerIncreases": "The Monster's power increases!",
      "threatEscalates": "The Monster threat escalates!",
      "levelIncrease": "The Monster has reached level {level}!",
      "ageIncrease": "The Monster ages and becomes more powerful!",
      "strengthGrows": "The Monster's strength grows with age!",
      "damageIncreases": "The Monster now deals {damage} damage per attack!",
      "moreDeadly": "The Monster becomes more deadly!",
      "enhancedThreat": "The Monster poses an enhanced threat!"
    },
    "behavior": {
      "monsterHesitates": "The Monster hesitates...",
      "monsterCircles": "The Monster circles its prey.",
      "monsterGrowls": "The Monster growls menacingly.",
      "monsterWaits": "The Monster waits for an opportunity to strike.",
      "monsterSnarls": "The Monster snarls at the heroes!",
      "monsterThreatens": "The Monster makes threatening gestures!",
      "monsterPostures": "The Monster strikes an intimidating posture!",
      "monsterRetreats": "The Monster retreats momentarily.",
      "monsterRegroups": "The Monster regroups for another attack.",
      "monsterReconsiders": "The Monster reconsiders its approach."
    },
    "damage": {
      "monsterHurt": "The Monster is hurt by the attack!",
      "monsterWounded": "The Monster is wounded!",
      "monsterBloodies": "The Monster bleeds from its wounds!",
      "monsterStaggers": "The Monster staggers from the blow!",
      "monsterRoarsInPain": "The Monster roars in pain!",
      "monsterWhimpers": "The Monster whimpers from the damage!",
      "monsterReels": "The Monster reels from the attack!",
      "criticalHit": "A critical blow strikes the Monster!",
      "massiveDamage": "The Monster takes massive damage!",
      "devastating": "A devastating attack wounds the Monster severely!"
    },
    "status": {
      "monsterHealthy": "The Monster appears healthy and strong.",
      "monsterWounded": "The Monster shows signs of injury.",
      "monsterBadlyHurt": "The Monster is badly hurt.",
      "monsterNearDeath": "The Monster is near death.",
      "mostlyHealthy": "The Monster has taken minor damage.",
      "moderatelyWounded": "The Monster is moderately wounded.",
      "severelyDamaged": "The Monster is severely damaged.",
      "criticalCondition": "The Monster is in critical condition."
    },
    "control": {
      "monsterControlled": "The Monster's eyes glow with unnatural fury!",
      "monsterCompelled": "The Monster is compelled to attack!",
      "monsterManipulated": "Dark magic manipulates the Monster!",
      "monsterDominated": "The Monster is dominated by evil will!",
      "unnatural": "The Monster moves with unnatural purpose!",
      "possessed": "The Monster appears possessed!",
      "influenced": "External forces influence the Monster's actions!",
      "controlEnds": "The unnatural control over the Monster ends.",
      "monsterFree": "The Monster is free from external influence.",
      "willRestored": "The Monster's natural will is restored."
    }
  },
  "player": {
    "validation": {
      "actionAlreadySubmitted": "You have already submitted an action for this round.",
      "deadPlayersCannotAct": "Dead players cannot perform actions.",
      "actionSubmissionFailed": "Action submission failed.",
      "invalidActionType": "Invalid action type.",
      "abilityNotAvailable": "Ability is not available.",
      "abilityOnCooldown": "Ability is on cooldown for {turns} more turn(s).",
      "noTargetSpecified": "No target specified.",
      "invalidTarget": "Invalid target specified.",
      "targetNoLongerValid": "Selected target is no longer alive or valid.",
      "monsterNotValidTarget": "Monster is no longer a valid target.",
      "targetNotAliveOrValid": "Player target is no longer alive or valid."
    },
    "submission": {
      "actionSubmitted": "Action submitted successfully.",
      "actionSubmissionProgress": "Action submission progress: {submitted}/{total} players submitted.",
      "allActionsSubmitted": "All actions submitted, processing round.",
      "waitingForOtherPlayers": "Waiting for other players to submit their actions.",
      "submissionSuccessful": "Your action has been recorded.",
      "submissionFailed": "Failed to submit action. Please try again."
    },
    "state": {
      "playerJoined": "{playerName} joined the game.",
      "playerLeft": "{playerName} wandered into the forest to discover that there are many more monsters and they were very much unequipped",
      "playerDisconnected": "{playerName} wandered into the forest to discover that there are many more monsters and they were very much unequipped.",
      "playerReconnected": "{playerName} has reconnected.",
      "hostChanged": "Game host changed to {playerName}.",
      "characterSelected": "Character selected successfully.",
      "raceSelected": "Race selected: {race}.",
      "classSelected": "Class selected: {class}.",
      "playerReady": "{playerName} is ready.",
      "playerNotReady": "{playerName} is not ready.",
      "allPlayersReady": "All players are ready! Host can start the game.",
      "waitingForPlayers": "Waiting for more players to join..."
    },
    "processing": {
      "actionProcessing": "Processing your action...",
      "actionProcessed": "Action processed successfully.",
      "actionFailed": "Action failed to process.",
      "actionCancelled": "Action was cancelled.",
      "actionInvalidated": "Action was invalidated: {reason}.",
      "actionExpired": "Action has expired."
    },
    "cooldowns": {
      "abilityCooledDown": "{abilityName} is ready to use again.",
      "cooldownRemaining": "{abilityName} has {turns} turn(s) remaining on cooldown.",
      "cooldownExpired": "Cooldown expired for {abilityName}.",
      "noCooldownActive": "No cooldown active for {abilityName}.",
      "cooldownActive": "Cooldown is active for {abilityName}."
    },
    "status": {
      "healthFull": "You are at full health.",
      "healthLow": "Your health is low!",
      "healthCritical": "Your health is critical!",
      "armorActive": "You have {armor} armor active.",
      "statusEffectsActive": "You have {count} status effect(s) active.",
      "noStatusEffects": "You have no active status effects."
    },
    "progression": {
      "levelUp": "You have reached level {level}!",
      "newAbilitiesUnlocked": "New abilities unlocked at level {level}!",
      "statsIncreased": "Your stats have increased!",
      "maxHpIncreased": "Maximum HP increased by {amount}!",
      "damageIncreased": "Damage increased by {percent}%!",
      "fullyHealed": "You have been fully healed!"
    },
    "classEffects": {
      "bloodFrenzyActive": "Blood Frenzy is active - damage increases as health decreases.",
      "unstoppableRageActive": "Unstoppable Rage is active for {turns} more turn(s).",
      "unstoppableRageEnded": "Unstoppable Rage has ended - you take {damage} exhaustion damage.",
      "spiritGuardActive": "Spirit Guard is protecting you for {turns} more turn(s).",
      "sanctuaryActive": "Sanctuary of Truth is active for {turns} more turn(s)."
    },
    "stoneArmor": {
      "armorIntact": "Your Stone Armor is intact with {value} armor value.",
      "armorDegraded": "Your Stone Armor has degraded to {value} armor value.",
      "armorDestroyed": "Your Stone Armor has been completely destroyed!",
      "armorWeakened": "Your Stone Armor weakens from the damage.",
      "negativeArmor": "Your broken Stone Armor causes you to take {percent}% more damage."
    },
    "actionStates": {
      "actionValid": "Action is valid and ready.",
      "actionInvalid": "Action is invalid: {reason}.",
      "actionPending": "Action is pending validation.",
      "actionWaitingForTarget": "Waiting for target selection.",
      "actionReadyToExecute": "Action is ready to execute."
    },
    "recovery": {
      "actionReset": "Your action has been reset.",
      "stateRecovered": "Player state has been recovered.",
      "syncComplete": "Player synchronization complete.",
      "connectionRestored": "Connection restored successfully.",
      "retryAction": "Please retry your action."
    },
    "private": {
      "yourTurn": "It's your turn to act.",
      "waitingForYourAction": "Waiting for your action.",
      "actionNeeded": "Please select an action.",
      "targetNeeded": "Please select a target.",
      "confirmAction": "Please confirm your action.",
      "roundStarting": "New round is starting.",
      "roundEnding": "Round is ending.",
      "gameStarting": "Game is starting!",
      "gameEnding": "Game is ending."
    },
    "barbarian": {
      "relentlessFuryActive": "Your rage burns brighter with each battle! +{damageBonus}% damage, +{vulnerabilityBonus}% damage taken.",
      "thirstyBladeActive": "Your blade thirsts for blood. Life steal active for {turnsLeft} more turn(s).",
      "thirstyBladeHealed": "Your Thirsty Blade restores {healAmount} HP from the blood spilled!",
      "thirstyBladeRefreshed": "The taste of victory refreshes your Thirsty Blade!",
      "sweepingStrikeReady": "Your attacks now sweep through multiple enemies with devastating force!",
      "relentlessFuryVulnerability": "Your fury makes you more vulnerable! You take {additionalDamage} extra damage."
    },
    "combat": {
      "attackedTargetWithArmor": "You attacked {targetName} for {actualDamage} damage ({damageAmount} base, reduced by {reductionPercent}% from their {effectiveArmor} armor).",
      "attackedTargetNoArmor": "You attacked {targetName} for {actualDamage} damage.",
      "stoneArmorWeakenedAttacker": "{targetName}'s Stone Armor weakens from your attack!",
      "moonbeamExposedCorruption": "{targetName}'s Moonbeam exposed your corruption!",
      "moonbeamConfirmedPurityAttacker": "{targetName}'s Moonbeam confirmed your purity.",
      "healedTarget": "You heal {targetName} for {actualHeal} HP.",
      "youKilledTarget": "You killed {targetName}.",
      "targetAvoidedDeathUndying": "{playerName} avoided death through Undying.",
      "stoneResolveAbsorbedYourDamage": "{targetName}'s Stone Resolve absorbed all your damage!"
    },
    "ui": {
      "abilityDamageSimple": "{damage} damage",
      "abilityDamageModified": "{modifiedDamage} damage ({baseDamage} base Ã— {modifier})"
    }
  },
  "ui": {
    "gameManagement": {
      "gameCreated": "Game created successfully with code {gameCode}.",
      "gameJoined": "Successfully joined game {gameCode}.",
      "gameStarted": "Game has started!",
      "gameEnded": "Game has ended.",
      "gameTimeout": "Game ended due to inactivity.",
      "youAreHost": "You are the host of this game.",
      "hostTransferred": "Host privileges transferred to {playerName}.",
      "onlyHostCanStart": "Only the host can start the game.",
      "waitingToStart": "Waiting for host to start the game.",
      "gameInProgress": "Game is in progress.",
      "gameWaitingForPlayers": "Waiting for more players to join.",
      "gameFull": "Game is full - no more players can join."
    },
    "roundManagement": {
      "roundStarted": "Round {round} has started.",
      "roundEnded": "Round {round} has ended.",
      "nextRoundStarting": "Next round starting...",
      "phaseChanged": "Game phase changed to {phase}.",
      "actionPhase": "Action phase - submit your actions.",
      "resultsPhase": "Results phase - reviewing round results.",
      "playersReady": "{ready}/{total} players are ready for the next round.",
      "majorityReady": "Majority of players are ready - resuming game.",
      "waitingForReady": "Waiting for players to be ready.",
      "youAreReady": "You are ready for the next round.",
      "youMarkedReady": "You have been marked as ready."
    },
    "feedback": {
      "actionConfirmed": "Your action has been confirmed.",
      "targetSelected": "Target selected: {targetName}.",
      "abilitySelected": "Ability selected: {abilityName}.",
      "waitingForOtherPlayers": "Waiting for other players...",
      "processingActions": "Processing all player actions...",
      "calculatingResults": "Calculating round results...",
      "operationSuccessful": "Operation completed successfully.",
      "changesSaved": "Changes have been saved.",
      "settingsUpdated": "Settings updated successfully.",
      "loading": "Loading...",
      "connecting": "Connecting to game...",
      "synchronizing": "Synchronizing game state...",
      "updating": "Updating..."
    },
    "errors": {
      "connectionLost": "Connection to server lost.",
      "gameNotFound": "Game not found.",
      "playerNotFound": "Player not found.",
      "invalidInput": "Invalid input provided.",
      "operationFailed": "Operation failed - please try again.",
      "unknownError": "An unknown error occurred.",
      "invalidGameCode": "Invalid game code format.",
      "invalidPlayerName": "Invalid player name.",
      "gameAlreadyStarted": "Game has already started.",
      "gameNotStarted": "Game has not started yet.",
      "notEnoughPlayers": "Not enough players to start the game."
    },
    "reconnection": {
      "reconnecting": "Attempting to reconnect...",
      "reconnected": "Successfully reconnected to the game.",
      "reconnectionFailed": "Failed to reconnect to the game.",
      "connectionStable": "Connection is stable.",
      "connectionUnstable": "Connection is unstable.",
      "recoveringGameState": "Recovering game state...",
      "stateRecovered": "Game state recovered successfully.",
      "syncInProgress": "Synchronization in progress...",
      "syncComplete": "Synchronization complete."
    },
    "accessibility": {
      "screenReaderAnnouncement": "{message}",
      "helpAvailable": "Help is available - press H for help.",
      "keyboardShortcuts": "Keyboard shortcuts are available.",
      "selectAction": "Select an action to perform.",
      "selectTarget": "Select a target for your action.",
      "confirmSelection": "Confirm your selection.",
      "waitForTurn": "Wait for your turn."
    },
    "settings": {
      "themeChanged": "Theme changed to {theme}.",
      "volumeChanged": "Volume set to {volume}%.",
      "notificationsEnabled": "Notifications enabled.",
      "notificationsDisabled": "Notifications disabled.",
      "settingsReset": "Settings reset to default.",
      "autoReady": "Auto-ready enabled for faster gameplay.",
      "confirmActions": "Action confirmation enabled.",
      "quickActions": "Quick actions enabled."
    },
    "flowControl": {
      "pauseGame": "Game has been paused.",
      "resumeGame": "Game has been resumed.",
      "skipPhase": "Skipping to next phase.",
      "fastForward": "Fast-forwarding through results.",
      "slowDown": "Returning to normal speed.",
      "timeRemaining": "{time} seconds remaining.",
      "timeExpired": "Time has expired.",
      "extensionGranted": "Time extension granted.",
      "hurryUp": "Please make your selection quickly."
    },
    "spectator": {
      "spectatorMode": "You are in spectator mode.",
      "observingGame": "Observing game {gameCode}.",
      "cannotParticipate": "Spectators cannot participate in the game.",
      "gameObservation": "You are observing this game."
    },
    "tutorial": {
      "welcomeMessage": "Welcome to Warlock! This is your first game.",
      "tutorialComplete": "Tutorial completed successfully.",
      "nextStep": "Next step: {step}.",
      "helpHint": "Hint: {hint}.",
      "learnMore": "Learn more about {topic}.",
      "firstGame": "This is your first game - good luck!",
      "firstAction": "Select your first action.",
      "firstTarget": "Choose your first target.",
      "firstRound": "Your first round is beginning."
    },
    "advanced": {
      "debugModeEnabled": "Debug mode enabled.",
      "developerOptions": "Developer options are available.",
      "advancedSettingsUnlocked": "Advanced settings unlocked.",
      "experimentalFeature": "This is an experimental feature.",
      "betaFeature": "This feature is in beta.",
      "statsAvailable": "Game statistics are available.",
      "performanceMetrics": "Performance metrics updated.",
      "analyticsRecorded": "Game analytics recorded."
    }
  },
  "serverLogMessages": {
    "info": {
      "WarlockAssignmentStart": "Assigning {requiredWarlocks} warlocks for {alivePlayerCount} players",
      "WarlockAssignedPreferred": "Assigned preferred player {warlockName} ({warlockId}) as warlock",
      "WarlockAssignedRandom": "Randomly assigned player {warlockName} ({warlockId}) as warlock",
      "WarlockAssignmentComplete": "Successfully assigned {assignedCount} initial warlocks",
      "WarlockCorruptionSuccess": "{actorName} successfully corrupted {targetName} (chance: {finalChance}%)",
      "ServerStarted": "Game server running on port {port}",
      "PlayerConnected": "Player connected: {socketId}",
      "PlayerDisconnected": "Player disconnected: {socketId}",
      "ConfigApiRequest": "Config API: Basic configuration requested",
      "PlayerRemovedFromGame": "Player {playerName} immediately removed from game {gameCode} with disconnect message: {message}",
      "PlayerNotInAnyGame": "Disconnected player {socketId} was not in any active games",
      "HostReassignedAfterDisconnect": "Host {oldHostName} disconnected from game {gameCode}, reassigning to {newHostName} ({newHostId})",
      "PlayerDisconnectTriggeredRoundProcessing": "Player {playerName} disconnect triggered round processing for game {gameCode}",
      "GameCreated": "Game created with code {gameCode} by {playerName}",
      "GameStarted": "Game started with {warlockCount} warlocks for {playerCount} players",
      "GameEnded": "Game ended. Winner: {winner}",
      "GameEndedAllPlayersLeft": "Game {gameCode} ended. All players left.",
      "GameTimedOut": "Game {gameCode} timed out after inactivity",
      "PlayerJoinedGame": "Player {playerName} joined game {gameCode}",
      "PlayerReconnected": "Player {playerName} reconnected to game {gameCode}",
      "PlayerSelectedCharacter": "Player {socketId} selected {race} {className} in game {gameCode}",
      "PlayerUnlockedAbilities": "Player {playerName} unlocked abilities: {abilities}",
      "PlayerTimedOutOrLeft": "Player {playerName} timed out or left game {gameCode}",
      "PlayerAttemptingPlayAgain": "Player {playerName} is attempting to play again in game {oldGameCode}",
      "PlayerSubmittedActionInGameRoom": "Player {playerName} submitted action: {actionType} -> {targetId}",
      "PlayerPerformedAction": "Player {playerName} ({socketId}) performed {actionType} on {targetId} in game {gameCode}",
      "ActionSubmissionProgress": "Action submission progress: {submittedCount}/{totalCount} players submitted in game {gameCode}",
      "AllActionsSubmitted": "All actions submitted, processing round for game {gameCode}",
      "PlayerSelectedAdaptabilityAbility": "Player {playerName} selected ability {abilityName} from {className}",
      "PlayerUsedRacialAbility": "Player {socketId} used racial ability {racialAbilityType} on {targetId} in game {gameCode}",
      "SocketActionSuccess": "Socket action succeeded: {action}",
      "ForceCleanedGame": "Force cleaned up game {gameCode} (had game: {hasGame}, had timer: {hasTimer})",
      "ReplayGameCreatedWithCode": "Created replay game with code {gameCode}",
      "PlayerReadyNextRound": "Player {socketId} clicked ready for next round in game {gameCode}",
      "ResumeByMajority": "Game {gameCode}: Resuming next round by majority vote",
      "CreatingReplayGame": "{playerName} creating replay game {gameCode}",
      "AdaptabilitySuccess": "Successfully replaced {oldAbilityType} with {newAbilityType} for player {playerName}"
    },
    "warn": {
      "InvalidGameCodeFormat": "Invalid game code format: {gameCode} from {socketId}",
      "PlayerNotInGameValidation": "Player not in game: {socketId} in game {gameCode}",
      "GameNotFoundValidation": "Game not found during validation: {gameCode} from {socketId}",
      "InvalidRaceSelection": "Invalid race selection: \"{race}\" is not a valid race (attempted by player {playerName})",
      "InvalidClassSelection": "Invalid class selection: \"{className}\" is not a valid class (attempted by player {playerName})",
      "InvalidRaceClassCombination": "Invalid race/class combination: \"{race}\" cannot be a \"{className}\" (attempted by player {playerName})",
      "UndyingSetupFailed": "UNDYING SETUP FAILED for {playerName}, fixing...",
      "UnknownAbilityType": "Unknown ability type: {actionType} requested by player {playerName}",
      "UnregisteredAbility": "Ability not registered: {abilityType} for class {className}",
      "NonAoeAbilityWithMultiTarget": "Player {playerName} tried to use non-AOE ability {actionType} with multi-target",
      "UnknownRacialAbilityType": "Unknown racial ability type: {racialAbilityType} from actor {actorId}",
      "UnknownStatusEffectApply": "Unknown effect {effectName} could not be applied to {playerName}",
      "EnvConfigLoadFailed": "Failed to load environment configuration for {environment}: {error}",
      "SocketActionKnownError": "A known error occurred during socket action: {action}",
      "AdaptabilityUseFailed": "Failed to use Adaptability for player {playerName}",
      "NonHostActionAttempt": "Non-host action attempt: {socketId} in game {gameCode}",
      "InvalidPlayerNameValidation": "Invalid player name: \"{playerName}\" from {socketId}: {error}"
    },
    "error": {
      "NameAvailabilityCheckError": "Error checking name availability for player {playerName} in game {gameCode}",
      "PlayerNextReadyError": "Error in handlePlayerNextReady for game {gameCode}: {errorDetails}",
      "PlayAgainError": "Error in handlePlayAgain for game {oldGameCode}",
      "PlayerDisconnectError": "Error during player disconnect for socket {socketId}",
      "FailedToSendErrorMessage": "Failed to send error message to socket after action {originalAction}",
      "SocketActionUnexpectedError": "An unexpected error occurred during socket action: {action}",
      "HandlePerformActionError": "Error in handlePerformAction for game {gameCode}: {errorDetails}",
      "AdaptabilityOldAbilityNotFound": "Old ability {oldAbilityType} not found for player {playerName}",
      "AdaptabilityClassNotFound": "Class {className} not found in abilities config",
      "AdaptabilityNewAbilityNotFound": "Ability {newAbilityType} at level {level} not found for class {className}",
      "GetClassAbilitiesError": "Error getting abilities: {errorMessage}"
    },
    "debug": {
      "PlayerActionSubmitAttempt": "Player action submission attempt by {playerName}: {status}",
      "PlayerActionSubmittedSuccessfully": "Player {playerName} successfully submitted action: {actionType} -> {targetId}",
      "PlayerActionInvalidated": "Invalidating action for {playerName}: {reason}",
      "PlayerActionSubmissionCleared": "Cleared action submission for {playerName}",
      "ActionSubmissionFailedInGameRoom": "Action submission failed for {playerName} in GameRoom: {reason}",
      "AbilityOnCooldownAttempt": "Player {playerName} tried to use {actionType} but it's on cooldown for {cooldown} more turns",
      "PlayerAbilityOnCooldown": "Player {playerName} ability {abilityType} on cooldown for {turnsRemaining} turns",
      "PlayerCooldownsExpired": "Player {playerName}: Cooldowns expired for {abilityNames}",
      "RockhewnStoneArmorStart": "Rockhewn {playerName} starts with Stone Armor: {armorValue} armor",
      "TotalEffectiveArmor": "Total effective armor for {playerName}: {effectiveArmor}",
      "LichSetupStart": "=== Lich SETUP for {playerName} ===",
      "PlayerUsedAdaptability": "Player {playerName} ({socketId}) is using Artisan Adaptability",
      "PlayerUsedRacialAbilityLog": "Player {playerName} uses racial ability {racialAbilityType}",
      "WarlockRoundTrackingReset": "Resetting warlock corruption tracking for new round.",
      "WarlockDetectionPenaltiesExpired": "Detection penalties expired for {count} players: {playerIds}",
      "WarlockCorruptionCooldownsExpired": "Corruption cooldowns expired for {count} players: {playerIds}",
      "WarlockCorruptionRecorded": "Recorded corruption by {actorId}. Round: {roundCount}, Player: {playerCount}, Cooldown: {cooldownTurns}",
      "WarlockCountIncreased": "Warlock count increased to {count}",
      "WarlockCountDecreased": "Warlock count decreased to {count}",
      "EventsLogSeparator": "--- Events Log Separator ({type}) ---",
      "AdaptabilityNoUsesLeft": "Player {playerName} has no Adaptability uses left",
      "NextReadySetInitialized": "Initialized nextReady set for game {gameCode}",
      "PlayerAlreadyMarkedReady": "Player {socketId} already marked ready for game {gameCode}",
      "GetClassAbilities": "Getting {className} abilities for level {level}",
      "FoundClassAbilities": "Found {count} abilities for {className} at level {level}",
      "DeadPlayerActionAttempt": "Player {playerName} tried to submit action while dead",
      "MultipleActionsAttempt": "Player {playerName} tried to submit multiple actions",
      "UnavailableAbilityAttempt": "Player {playerName} tried to use unavailable ability: {abilityType}",
      "StoneArmorDegradation": "{playerName}'s Stone Armor degrades from {oldValue} to {newValue}",
      "BloodFrenzyDamageIncrease": "Blood Frenzy: {playerName} missing {missingHpPercent}% HP, damage increased by {damageIncreasePercent}%",
      "UndyingSetup": "UNDYING SETUP: {playerName} now has Undying effect:",
      "InternationalNameTestStart": "Testing international name support",
      "InternationalNameTestResult": "Name test: \"{name}\" - Valid: {isValid}, Error: {error}",
      "PlayerDeathCheck": "Death check for {playerName}: Race={race}, HP={hp}",
      "ProcessingPendingDeath": "Processing pending death for {playerName}: Race={race}, HasRacialEffects={hasRacialEffects}",
      "UndyingTriggered": "Undying triggered: Resurrecting {playerName} after all attacks",
      "UndyingSuccess": "Undying success: {playerName} resurrected to {resurrectedHp} HP after monster attacks",
      "PlayerDeathFinal": "Death final: {playerName} has died permanently",
      "UndyingSetupNeeded": "Undying not properly set for {playerName}, setting it up now",
      "UndyingSetupComplete": "Fixed Undying effect for {playerName}: {racialEffects}",
      "WarlockDetected": "Marked warlock {warlockName} as detected with {penaltyTurns} turn penalty",
      "WarlockCorruptionBlocked": "Corruption blocked for {actorName}: {reason}",
      "WarlockLevelUpCorruptionPrevented": "Level-up corruption prevented by configuration",
      "WarlockCorruptionAttemptDetails": "Warlock {actorName} attempts to corrupt {targetName} (Base: {baseChance}%, Mod: {modifier}, Final: {finalChance}%)",
      "WarlockDetectionPenaltyApplied": "Applied detection penalty to {warlockName} from {detectionSource}"
    }
  }
}